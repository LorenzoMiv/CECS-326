Exam Notes: 
	- Need ID
	- Test will be entire duration of class period
	- 75 % mpq 25% short response 
	- Will be taking it on laptop
	- No access to the internet, unless they are designated sites that we are allowed to have
	- there will most likely be some helpful documents on canvas 
	- Two pages of typed notes
	- Anything in Chapter 1 and 2
	- might be a bit heavier on chapter 2 (66%)
	- timing will not be on the exam

Lecture Notes: 
	- Process vs Thread:
		- Process is a program in execution (text document like word)
		- Thread is a sub task that is associated with the process (auto saving, spell checking, formatting)
	- Multiprocessing: 
		- multiple processes running simultaneously
	- multithreading: 
		- a single process using many threads 
	- Semaphore allows us to dictate which state we should be in 
	- Mutex is a lock that is either 1 or 0 
	- Trapping allows you to get into the kernel with a system call from the user table  and allows for the process to get access to the correct hardware 
	  user table has the same system calls but as pointers and when it is called it points to the actual kernel table and will get called there, 
	  it gets returned and goes back to that instruction and success is reported and given to original caller
	- Kernel vs User space multithreading: 
		- user space would allow of you to not need to trap into the kernel, but this has a trade off of being slower 
		  while the kernel would have faster execution to the hardware in terms of multithreading
	- Modern Operating systems are decoupled, what are some of the advantages: 
		- Decoupling  can make the kernel smaller and easier to control from crashes. 
		  For example, with microkernels there is some control of processes that allows for bugs to at most crash the kernel they are running on and not the entire system. 
		  Decoupling could potentially assist with race conditions and aid in working toward resolving issues there. 
	- How can an operating system that uses interrupts implement semaphores:
		- semaphores would turn the machine into a single tasking machine which is doable but not idea 

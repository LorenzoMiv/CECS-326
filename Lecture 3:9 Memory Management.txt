Lecture Notes: 
	- make file is a batch script that builds the entire process 
	- Memory Management: 
		- Parkinson's Law: Programs expand to fill the memory available to hold them
		- Average home computer nowadays has 10,000 times more memory than the IBM 7094, the largest computer in the world in the early 60's 
	- No Memory Abstraction: 
		1) Mode a: where OS starts at beginning of RAM and then user program runs above it, MSDos is an example of this
		2) Mode b: where user program is prioritized in beginning of RAM and operating system is ROM (Read-only memory) 
			- ROM static and not going to change the OS
			- phones typically cannot boot into EPROM (erasable programmable read only memory) 
		3) Mode c:  where OS is in RAM, user program in the middle, and device drivers are in ROM
			- We can change things we would like in the operating system which can have some benefits 
	- Running multiple programs without memory abstraction: 
		- we need some sort of offset to take into account for the previous programs memory space
		- this would be considered as some base register, which records the location
		- we have to add more assembly in order for this to work properly and adds additional work
	- Swapping: 
		- Memory allocation changes as processes come into memory and should leave it
		- because of this idea there may be some wasted space, not every process that is being run can actually be scheduled and perfectly consume the allowed space 
		- we might cause fragmentation where we start managing processes and they aren't going to fit as we would like them to, essentially RAM has gaps in it that are not being used 
		- this can be done in memory as well, and this is why SSD's are useful because they do not require a defrag
		- we do not want to allocate too tightly either, we want to give processes a little bit of wiggle room 

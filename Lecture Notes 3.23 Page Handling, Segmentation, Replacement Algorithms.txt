Lecture Notes: 
	- Ask if we went over Denial of Service attacks and DoS ctd. In 378... 

	- we want to have the package sudo apt install build-essential, which can assist in some of the compiler issues we may have 
	- Page Fault Handling: 
		1) Hardware traps to kernel, saving program counter on stack 
			- since we can't access the information we want we need to trap into the kernel
			- save a snapshot for later reference
		2) Assembly code routine started to save general registers and other volatile info
			- Saves all current values in memory (register space/fast memory)
		3) System discovers page fault has occurred, tried to discover which virtual page needed 
			- we may have to reference several places for the information that is needed
		4) Once virtual address caused fault is known, system checks to see if address valid and the protection consistent with access
			- If it's a fault we can recover from, meaning we pull it from somewhere, we need to validate it
		5) If frame selected dirty, page is scheduled for transfer to disk, context switch takes place, suspending faulting process
			- 
		6) As soon as frame clean, operating system looks up disk address where needed page is, schedules disk operation to bring it in 
			- 
		7) When disk interrupt indicates page has arrived, tables updated to reflect position, and frame marked as being in normal state
			- 
		8) Faulting instruction backed up to state it had when it began program counter is reset
		9) Faulting process is schedules, operating system returns to routine that called it
		10) Routine reloads registers and other state information, returns to user space to continue execution
		- 10 steps overall from page fault to process continuing from where it left off
		
		- page replacement algorithm puts missing information into a memory slot to be used by replacing an old one that isn't as utilized
		
	- Instruction backup: 
		- 3 parts to an instruction: Opcode, First Operand, Second Operand |   MOVE   |   6   |   2   | MOVE.L #6(A1), 2(A0) 
		- instruction length is 16 bits 
	- Segmentation: 
		1) The source text being saved for the printed listing
			- 
		2) The symbol table, names and attributes of variables
			- Luxor or scanner, makes a generic form of your code, like some types are branches, some move, some add, and so on, generic string, generic int... this makes a generalization for your different data types
			- creates tokens out of code that are symbolically referenced... tokens assign an identifier so like ! == 1, @ == 2
			- lookup table, action table, and state table
		3) The table containing integer and floating point constants used 
			- looks like a matrix and these tables are referenced to see if the states are valid 
		4) the parse tree, syntactic analysis of the program 
		5) the stack used for procedure calls within compiler 
		
		- A segmented memory allows each table to grow or shrink independently of the other tables

		- each thing gets it's own memory space
		Consideration										Paging				Segmentation
		- Need the programmer to be aware that this technique 				No					yes
		is used? 
		- How many linear address spaces are there					1					Many
		- Can the total address space exceed the size of 
		physical memory										Yes					Yes
		- Can procedures and data be distinguished
		and separately protected?								No					Yes
		- Can Tables whose size fluctuates be 
		accommodated easily?									
		(this is in chapter notes)

		- game.c is using segmentation

		- Pure Segmentation suffers from fragmentation
			- every group has its requirements and when they are put off and on so many times it creates little pockets
			- 
	
		- Page replacement algorithms: 
			- Not Recently Used: 
				- At page fault, system inspects pages
				- oldest thing accessed gets replaced
				- categories of pages based on the current values of their R and M bits: 
					Class 0: not referenced, not modified
					Class 1: not referenced, modified
					class 2: referenced, not modified 
					class 3: referenced, modified
			- Clock Page Replacement Algorithm: 
				- When a page fault occurs, the page the hand is pointing to is inspected
				- the action take depends on the R bit: 0 -> evict, 1-> clear R and advance hand
				- depends on the last item read, depends on access and position compared to the most recent
			- Working set: 
				- set of pages used by the k most recent memory references
				- function w(k, t) is the size of the working set at a time t 
				- the parser should know what the next instruction is, this way if it has to crash it may be able to recover from that
				- known as a read ahead
				- allows us to look ahead at what we can replace 
				- working set can be added to any of the previously discussed algorithms



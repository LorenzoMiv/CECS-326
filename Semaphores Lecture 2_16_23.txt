Semaphores
Code Example: 
#define N 100                         /*number of slots in the buffer */
typedef int semaphore;        /*semaphores are a special int*/
semaphore mutex = 1;        /*controls access to critical region*/
semaphore empty = N;        /*counts empty buffer slots */
semaphore full = 0;                /*counts full buffer slots */


void producer(void)
{
        int item;


        while (TRUE) {
                item = produce_item();        /*true is the constant of 1*/
                down(&empty);                /*generate something to put in buffer*/
                down(&mutex);                /*decrement empty count*/
                insert_item(item);                /*enter critical region*/
                up(&mutex);                        /*leave critical region*/
                up(&full);                        /*increment count of full slots*/
        }
}


void consumer(void)
{
        int item;
        
        while(TRUE){                                /*infinite loop*/
                down(&full)                        /*decrement full count*/
                down(&mutex);                /*enter critical region*/
                item = remove_item();        /*take item from buffer*/
                up(&mutex);                        /*leave critical region*/
                up(&empty);                        /*increment count of empty slots*/
                consume_item(item);                /*do something with the item*/
        }
}






Mutexes: 
* some assembly language
mutex_lock: 
        TSL REGISTER MUTEX                        |copy mutex to reg and set to mutex to 1
        CMP REGISTER,#0                        |was mutex zero?
        JZE ok                                        |if zero, mutex was unlocked, so return
        CALL thread_yield                        |mutex is busy; schedule another thread
        JMP mutex_lock                        |try again
ok:        RET                                        |return to caller; critical region entered


mutext_unlock:
        MOVE MUTEX,#0                        |store a 0 in mutex
        RET                                        |return to caller 


Mutexes in Pthreads


Thread Call
	Description
	Pthread_mutex_init
	Create a mutex
	Pthread_mutex_destroy
	Destroy an existing mutex
	Pthread_mutex_lock
	Acquire a lock or block
	Pthread_mutex_trylock
	Acquire a lock or fail 
	Pthread_mutex_unlock
	Release a lock
	Pthread_cond_init
	Create a condition variable
	Pthread_cond_destroy
	Destroy a condition variable
	Pthread_cond_wait
	Block waiting for a signal
	Pthread_cond_signal
	Signal another thread and wake it up 
	Pthread_cond_broadcast
	Signal multiple threads and wake up all of them
	









Mutexes in Pthreads: 
#include <stdio.h>
#include <pthread.h>
#define MAX  10000000000                /*how many numbers to produce*/
pthread_mutex_t the_mutex;        
pthread_cond_t condc, condp;        /*used for signaling*/
int buffer = 0;                                /*buffer used between producer and consumer*/


void *producer(void *ptr){
        
        int i;
        for(i = 1; i <= MAX; i++){
                pthread_mutex_lock(&the_mutex);        /*get exclusive access to buffer*/
                while(buffer != 0) pthread_cond_wait(&condp, &the_mutex);
                buffer = i;                                /*put item in buffer*/
                pthread_cond_signal(&condc);        /*wake up consumer*/
                pthread_mutex_unlcok(&the_mutex) /*release access to buffer*/
        }
        pthread_exit(0);
}


void *consumer(void *ptr){
        int i;
        for(i = 1; i <= MAX; i++){
                pthread_mutex_lock(&the_mutex)        /*get exclusive access to buffer*/
                while (buffer == 0) pthread_cond_wait(&condc, &the_mutex);
                buffer = 0;                                /*take item out of buffer */
                pthread_cond_signal(&condp);        /*wake up producer*/
                pthread_mutex_unlock(&the_mutex); /*release access to buffer*/
        }
        pthread_exit(0);
}


int main(argc, char **argv)
{
        pthread_t pro, con;
        pthread_mutex_intit(&the_mutex, 0);
        pthread_cond_init(&condc, 0);
        pthread_cond_init(&condp, 0);
        pthread_create(&con, 0, producer, 0);
        pthread_create(&pro, 0, producer, 0);
        pthread_join(pro, 0);
        pthread_join(con, 0);
        pthread_cond_destroy(&condc);
        pthread_cond_destroy(&condp);
        pthread_mutex_destroy(&the_mutex);
}


Lecture Notes: 
* Above is code from the slides 
* Semaphore: A variable or abstract data type used to control access to common resource by multiple threads and avoid critical section problems in concurrent systems like multitasking in operating systems 
* mutex is critical region, will always be a 1 or 0 and is the signal to enter (think of a lock)
* down(&empty): do a TSL - performing a check to see if the value is valid
* down(&mutex): 
* insert_item(item): critical region
* up(&mutex):
* up(&full):
* note: down and up will never go beyond its limits
   * we want to keep critical region as small as possible
   * difficult to implement in a real world application
   * mutex will surround the critical region in code
   * there is no guarantee of how these will execute in tandem, so if we were to call producer and consumer, there is a possibility that there will attempt to access the critical region simultaneously (race condition)
   * mutexes are functions of a programming language
      * cannot be nested, whereas semaphores